<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.2.xsd">
	<http pattern="/login.jsp" security="none" />
	<!-- <http auto-config="true" use-expressions="true" access-denied-page="/accessDenied.jsp"
		> -->
	<http auto-config="true" use-expressions="true">
		<form-login login-page="/login.jsp" default-target-url="/accessDenied.jsp"
			always-use-default-target="true" />
		<!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<logout logout-url="/outlogin" logout-success-url="/login.jsp" />
	</http>

	<!-- <authentication-manager> <authentication-provider> <user-service> <user
		name="yiibai" password="123456" authorities="ROLE_USER" /> </user-service>
		</authentication-provider> </authentication-manager> -->
	<beans:bean id="myFilter"
		class="com.erdangjiade.spring.security.MyFilterSecurityInterceptor">
		<!-- 登录时赋予权限 -->
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<!-- 检查用户是否够权限访问资源 -->
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<!-- resourceMap key:url url:role -->
		<beans:property name="securityMetadataSource" ref="securityMetadataSource" />
	</beans:bean>

	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager"
		erase-credentials="false">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<beans:bean id="myUserDetailService"
		class="com.erdangjiade.spring.security.MyUserDetailService">
		<beans:property name="userCache" ref="userCache"></beans:property>
	</beans:bean>
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<beans:bean id="myAccessDecisionManagerBean"
		class="com.erdangjiade.spring.security.MyAccessDecisionManager">
	</beans:bean>
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<beans:bean id="securityMetadataSource"
		class="com.erdangjiade.spring.security.MyInvocationSecurityMetadataSource" />

	<beans:bean id="userCache"
		class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
		<beans:property name="cache" ref="ehcache4UserDetails"></beans:property>
	</beans:bean>
	<!-- 将使用默认的 CacheManager 创建一个名为 ehcache4UserDetails 的 Ehcache 对象 -->
	<beans:bean id="ehcache4UserDetails"
		class="org.springframework.cache.ehcache.EhCacheFactoryBean"></beans:bean>

	<beans:bean id="aclService"
		class="org.springframework.security.acls.jdbc.JdbcMutableAclService">
		<beans:constructor-arg ref="dataSource" />
		<beans:constructor-arg ref="lookupStrategy" />
		<beans:constructor-arg ref="aclCache" />
		<!-- 指定新增acl_sid的脚本 -->
		<beans:property name="insertSidSql"
			value="insert into acl_sid( principal, sid) values (?, ?)" />
		<!-- 指定新增acl_class的脚本 -->
		<beans:property name="insertClassSql"
			value="insert into acl_class(class) values ( ?)" />
		<!-- 指定新增acl_object_identity的脚本 -->
		<beans:property name="insertObjectIdentitySql"
			value="insert into acl_object_identity( object_id_class, object_id_identity, owner_sid, entries_inheriting) values( ?, ?, ?, ?)" />
		<!-- 指定新增acl_entry的脚本 -->
		<beans:property name="insertEntrySql"
			value="insert into acl_entry( acl_object_identity, ace_order, sid, mask, granting, audit_success, audit_failure) values (?, ?, ?, ?, ?, ?, ?)" />
		<!-- 查询刚刚新增的acl_sid的主键的SQL -->
		<beans:property name="sidIdentityQuery" value="select max(id) from acl_sid" />
		<!-- 查询刚刚新增的acl_class的主键的SQL -->
		<beans:property name="classIdentityQuery" value="select max(id) from acl_class" />
	</beans:bean>

	<!-- 数据库连接池 -->
	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<beans:property name="driverClassName" value="org.postgresql.Driver" />
		<beans:property name="url"
			value="jdbc:postgresql://localhost:5432/springsecurity" />
		<beans:property name="username" value="postgres" />
		<beans:property name="password" value="p" />
		<beans:property name="maxActive" value="30" />
		<beans:property name="maxIdle" value="5" />
	</beans:bean>

	<beans:bean id="lookupStrategy"
		class="org.springframework.security.acls.jdbc.BasicLookupStrategy">
		<beans:constructor-arg ref="dataSource" />
		<beans:constructor-arg ref="aclCache" />
		<beans:constructor-arg ref="aclAuthorizationStrategy" />
		<beans:constructor-arg ref="grantingStrategy" />
	</beans:bean>

	<beans:bean id="aclAuthorizationStrategy"
		class="org.springframework.security.acls.domain.AclAuthorizationStrategyImpl">
		<beans:constructor-arg>
			<beans:list>
				<beans:bean
					class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<beans:constructor-arg value="ROLE_ADMIN" /><!--
						改变所有权需要的权限 -->
				</beans:bean>

				<beans:bean
					class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<beans:constructor-arg value="gaModifyAuditing" /><!--
						改变授权需要的权限 -->
				</beans:bean>

				<beans:bean
					class="org.springframework.security.core.authority.SimpleGrantedAuthority">
					<beans:constructor-arg value="gaGeneralChanges" /><!--
						改变其它信息所需要的权限 -->
				</beans:bean>
			</beans:list>
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="grantingStrategy"
		class="org.springframework.security.acls.domain.DefaultPermissionGrantingStrategy">
		<beans:constructor-arg>
			<beans:bean
				class="org.springframework.security.acls.domain.ConsoleAuditLogger" />
		</beans:constructor-arg>
	</beans:bean>

	<beans:bean id="aclCache"

		class="org.springframework.security.acls.domain.EhCacheBasedAclCache">

		<beans:constructor-arg ref="cache" /><!-- 对应于Ehcache -->

		<beans:constructor-arg ref="grantingStrategy" />

		<beans:constructor-arg ref="aclAuthorizationStrategy" />

	</beans:bean>



	<!-- 定义一个Ehcache -->

	<beans:bean id="cache"
		class="org.springframework.cache.ehcache.EhCacheFactoryBean">

		<beans:property name="cacheName" value="aclCache" />

		<beans:property name="cacheManager" ref="aclCacheManager" />

	</beans:bean>



	<!-- 定义CacheManager -->

	<beans:bean id="aclCacheManager"

		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">

		<!-- 指定配置文件的位置 -->

		<beans:property name="configLocation" value="classpath:ehcache.xml" />

		<!-- 指定新建的CacheManager的名称 -->

		<beans:property name="cacheManagerName" value="aclCacheManager" />

	</beans:bean>
	<beans:bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource">
		</beans:property>
	</beans:bean>
	<beans:bean id="userService" class="securitysecurityservice.UserService">
	   <beans:property name="aclService" ref="aclService"></beans:property>
	</beans:bean>

</beans:beans>